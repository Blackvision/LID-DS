import re
import sys
import time
import uuid
import random
import argparse
import requests
from bs4 import BeautifulSoup

def vprint(string):
    """
    prints the given string if the verbose flag is set
    """
    if args.verbose:
        print(string)

def http_requests(url):
    """
    main loop for normal behaviour
    """

    # probabilities
    while True:
        try:
            sys.stdin.readline()
            random_choice = random.randint(1, 100)

            if random_choice <= 50:
                vprint("Uploading")
                upload_file(url)
            else:
                vprint("Downloading")
                download_file(url)

        except Exception as e:
            vprint("Error")
            vprint(e)
            time.sleep(5)

def upload_file(url):
    """
    execute POST request to victim
    upload file with name generated with uuid
    """
    file_path = '/home/upload_files/file.txt'
    with open(file_path, 'rb') as f:
        r = requests.post(
           url,
            files = {"file": (str(uuid.uuid4().hex), f)}
        )
    vprint(r.status_code)


def download_file(url):
    """
    get list of possible files to download
    go on one of these links and download file
    """
    req = requests.get(url)
    soup = BeautifulSoup(req.text, 'html.parser')
    link_list = []

    href = soup.find_all('a', href=True)
    for j in href:
        link_list.append(j['href'])
    if len(link_list) > 0:
        selected_link = random.randint(0, len(link_list)-1)
        req = requests.get(link_list[selected_link])
    else:
        vprint("No uploads yet, not downloading")
    vprint(f"Downloaded - currently {len(link_list)} files to download")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='HTTPS-Client Simulation.')

    parser.add_argument('-ip',
                        dest='server_ip',
                        action='store',
                        type=str,
                        required=True,
                        help='The IP address of the target server')
    parser.add_argument('-v',
                        dest='verbose',
                        action='store',
                        type=bool,
                        required=False,
                        default=False,
                        help='Make the operations more talkative')
    args = parser.parse_args()

    # appending tomcat port 
    args.server_ip = args.server_ip + ':8080'
    url = f'http://{args.server_ip}/'

    http_requests(url)

